<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ProxyEndpoint name="default">
    <FaultRules>
        <FaultRule>
            <Step>
                <Name>RaiseFault-AuthenticationError</Name>
            </Step>
            <Condition>(fault.name = "InvalidApiKey") or (fault.name = "InvalidApiKeyForGivenResource") or (fault.name = "invalid_access_token")</Condition>
        </FaultRule>
    </FaultRules>
    <PreFlow name="PreFlow">
        <Request>
            <Step>
                <Name>SpikeArrest</Name>
            </Step>
            <Step>
                <Name>RaiseFault-SendCORSHeaders</Name>
                <Condition>(request.header.access-control-request-headers != null) and (request.header.access-control-request-headers != "") and (request.verb = "OPTIONS")</Condition>
            </Step>
            <Step>
                <Name>RaiseFault-AuthenticationError</Name>
                <Condition>!(proxy.pathsuffix MatchesPath "/oauth/token") and ((request.header.apikey = null) or (request.header.apikey = "")) and ((request.header.Authorization = null) or (request.header.Authorization = ""))</Condition>
            </Step>
            <Step>
                <Name>VerifyAPIKey-ForAPIKey</Name>
                <Condition>(request.header.apikey != null) and (request.header.apikey != "")</Condition>
            </Step>
            <Step>
                <Name>Quota-APIKey</Name>
                <Condition>(request.header.apikey != null) and (request.header.apikey != "")</Condition>
            </Step>
            <Step>
                <Name>BasicAuthentication-DecodeCredentials</Name>
                <Condition>!(proxy.pathsuffix MatchesPath "/oauth/token") and ((request.header.Authorization != null) and (request.header.Authorization != "")) and ((request.header.Authorization =| "Basic") or (request.header.Authorization =| "basic"))</Condition>
            </Step>
            <Step>
                <Name>VerifyAPIKey-ForBasicAuthUser</Name>
                <Condition>!(proxy.pathsuffix MatchesPath "/oauth/token") and ((request.header.Authorization != null) and (request.header.Authorization != "")) and ((request.header.Authorization =| "Basic") or (request.header.Authorization =| "basic"))</Condition>
            </Step>
            <Step>
                <Name>RaiseFault-AuthenticationError</Name>
                <Condition>(basic_auth.password != verifyapikey.VerifyAPIKey-ForBasicAuthUser.client_secret)</Condition>
            </Step>
            <Step>
                <Name>Quota-APIKeyForBasicAuth</Name>
                <Condition>!(proxy.pathsuffix MatchesPath "/oauth/token") and ((request.header.Authorization != null) and (request.header.Authorization != "")) and ((request.header.Authorization =| "Basic") or (request.header.Authorization =| "basic"))</Condition>
            </Step>
            <Step>
                <Name>OAuthV2-VerifyAccessToken</Name>
                <Condition>((request.header.Authorization != null) and (request.header.Authorization != "")) and ((request.header.Authorization =| "Bearer") or (request.header.Authorization =| "bearer"))</Condition>
            </Step>
            <Step>
                <Name>Quota-OAuth</Name>
                <Condition>((request.header.Authorization != null) and (request.header.Authorization != "")) and ((request.header.Authorization =| "Bearer") or (request.header.Authorization =| "bearer"))</Condition>
            </Step>
        </Request>
        <Response/>
    </PreFlow>
    <Flows>
        <Flow name="generateToken">
            <Description>generate token</Description>
            <Request>
                <Step>
                    <Name>BasicAuthentication-DecodeCredentials</Name>
                    <Condition>((request.header.Authorization != null) and (request.header.Authorization != "")) and ((request.header.Authorization =| "Basic") or (request.header.Authorization =| "basic"))</Condition>
                </Step>
                <Step>
                    <Name>VerifyAPIKey-ForBasicAuthUser</Name>
                    <Condition>((request.header.Authorization != null) and (request.header.Authorization != "")) and ((request.header.Authorization =| "Basic") or (request.header.Authorization =| "basic"))</Condition>
                </Step>
                <Step>
                    <Name>RaiseFault-AuthenticationError</Name>
                    <Condition>(basic_auth.password != verifyapikey.VerifyAPIKey-ForBasicAuthUser.client_secret)</Condition>
                </Step>
                <Step>
                    <Name>VerifyAPIKey-ForTokenClientID</Name>
                    <Condition>((request.header.Authorization = null) or (request.header.Authorization = ""))</Condition>
                </Step>
                <Step>
                    <Name>RaiseFault-AuthenticationError</Name>
                    <Condition>((request.header.Authorization = null) or (request.header.Authorization = "")) and (request.formparam.client_id != verifyapikey.VerifyAPIKey-ForTokenClientID.client_id) or (request.formparam.client_secret != verifyapikey.VerifyAPIKey-ForTokenClientID.client_secret)</Condition>
                </Step>
                <Step>
                    <Name>OAuthV2-GenerateAccessToken</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>AssignMessage-AccessToken</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/oauth/token") and (request.verb = "POST") and (request.formparam.grant_type = "client_credentials")</Condition>
        </Flow>
        <Flow name="uploadFile">
            <Description>uploads an image</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/pet/*/uploadImage") and (request.verb = "POST")</Condition>
        </Flow>
        <Flow name="addPet">
            <Description>Add a new pet to the store.</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/pet") and (request.verb = "POST")</Condition>
        </Flow>
        <Flow name="updatePet">
            <Description>Update an existing pet</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/pet") and (request.verb = "PUT")</Condition>
        </Flow>
        <Flow name="findPetsByStatus">
            <Description>Finds Pets by status</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/pet/findByStatus") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="findPetsByTags">
            <Description>Finds Pets by tags</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/pet/findByTags") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="getPetById">
            <Description>Find pet by ID</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/pet/*") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="updatePetWithForm">
            <Description>Updates a pet in the store with form data</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/pet/*") and (request.verb = "POST")</Condition>
        </Flow>
        <Flow name="deletePet">
            <Description>Deletes a pet</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/pet/*") and (request.verb = "DELETE")</Condition>
        </Flow>
        <Flow name="placeOrder">
            <Description>Place an order for a pet</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/store/order") and (request.verb = "POST")</Condition>
        </Flow>
        <Flow name="getOrderById">
            <Description>Find purchase order by ID</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/store/order/*") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="deleteOrder">
            <Description>Delete purchase order by ID</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/store/order/*") and (request.verb = "DELETE")</Condition>
        </Flow>
        <Flow name="getInventory">
            <Description>Returns pet inventories by status</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/store/inventory") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="createUsersWithArrayInput">
            <Description>Creates list of users with given input array</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/user/createWithArray") and (request.verb = "POST")</Condition>
        </Flow>
        <Flow name="createUsersWithListInput">
            <Description>Creates list of users with given input array</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/user/createWithList") and (request.verb = "POST")</Condition>
        </Flow>
        <Flow name="getUserByName">
            <Description>Get user by user name</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/user/*") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="updateUser">
            <Description>Updated user</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/user/*") and (request.verb = "PUT")</Condition>
        </Flow>
        <Flow name="deleteUser">
            <Description>Delete user</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/user/*") and (request.verb = "DELETE")</Condition>
        </Flow>
        <Flow name="loginUser">
            <Description>Logs user into the system</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/user/login") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="logoutUser">
            <Description>Logs out current logged in user session</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/user/logout") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="createUser">
            <Description>Create user</Description>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/user") and (request.verb = "POST")</Condition>
        </Flow>
    </Flows>
    <PostFlow name="PostFlow">
        <Request/>
        <Response>
            <Step>
                <Name>AssignMessage-SetCORSHeaderForNonOption</Name>
                <Condition>request.verb != "OPTIONS"</Condition>
            </Step>
        </Response>
    </PostFlow>
    <HTTPProxyConnection>
        <BasePath>/petstore/v2</BasePath>
    </HTTPProxyConnection>
    <RouteRule name="default">
        <TargetEndpoint>default</TargetEndpoint>
    </RouteRule>
</ProxyEndpoint>